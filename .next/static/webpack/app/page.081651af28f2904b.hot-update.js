"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/algorithms/SortingAlgorithms.tsx":
/*!*****************************************************!*\
  !*** ./components/algorithms/SortingAlgorithms.tsx ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SortingAlgorithms; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _AlgorithmSelector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../AlgorithmSelector */ \"(app-pages-browser)/./components/AlgorithmSelector.tsx\");\n/* harmony import */ var _VisualizationArea__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../VisualizationArea */ \"(app-pages-browser)/./components/VisualizationArea.tsx\");\n/* harmony import */ var _CodeDisplay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CodeDisplay */ \"(app-pages-browser)/./components/CodeDisplay.tsx\");\n/* harmony import */ var _ControlPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ControlPanel */ \"(app-pages-browser)/./components/ControlPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction SortingAlgorithms() {\n    var _algorithms_find;\n    _s();\n    const [selectedAlgorithm, setSelectedAlgorithm] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"bubble\");\n    const [array, setArray] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        64,\n        34,\n        25,\n        12,\n        22,\n        11,\n        90\n    ]);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const isPlayingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [currentStep, setCurrentStep] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [comparingIndices, setComparingIndices] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [sortedIndices, setSortedIndices] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const algorithms = [\n        {\n            id: \"bubble\",\n            name: \"Bubble Sort\",\n            complexity: \"O(n\\xb2)\"\n        },\n        {\n            id: \"quick\",\n            name: \"Quick Sort\",\n            complexity: \"O(n log n)\"\n        },\n        {\n            id: \"merge\",\n            name: \"Merge Sort\",\n            complexity: \"O(n log n)\"\n        }\n    ];\n    const bubbleSortCode = \"function bubbleSort(arr) {\\n  const n = arr.length;\\n  for (let i = 0; i < n - 1; i++) {\\n    for (let j = 0; j < n - i - 1; j++) {\\n      if (arr[j] > arr[j + 1]) {\\n        // Swap elements\\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\\n      }\\n    }\\n  }\\n  return arr;\\n}\";\n    const quickSortCode = \"function quickSort(arr, low = 0, high = arr.length - 1) {\\n  if (low < high) {\\n    const pi = partition(arr, low, high);\\n    quickSort(arr, low, pi - 1);\\n    quickSort(arr, pi + 1, high);\\n  }\\n}\\n\\nfunction partition(arr, low, high) {\\n  const pivot = arr[high];\\n  let i = low - 1;\\n  \\n  for (let j = low; j < high; j++) {\\n    if (arr[j] < pivot) {\\n      i++;\\n      [arr[i], arr[j]] = [arr[j], arr[i]];\\n    }\\n  }\\n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\\n  return i + 1;\\n}\";\n    const mergeSortCode = \"function mergeSort(arr) {\\n  if (arr.length <= 1) return arr;\\n  \\n  const mid = Math.floor(arr.length / 2);\\n  const left = mergeSort(arr.slice(0, mid));\\n  const right = mergeSort(arr.slice(mid));\\n  \\n  return merge(left, right);\\n}\\n\\nfunction merge(left, right) {\\n  const result = [];\\n  let i = 0, j = 0;\\n  \\n  while (i < left.length && j < right.length) {\\n    if (left[i] <= right[j]) {\\n      result.push(left[i++]);\\n    } else {\\n      result.push(right[j++]);\\n    }\\n  }\\n  \\n  return result.concat(left.slice(i)).concat(right.slice(j));\\n}\";\n    const getAlgorithmCode = ()=>{\n        switch(selectedAlgorithm){\n            case \"bubble\":\n                return bubbleSortCode;\n            case \"quick\":\n                return quickSortCode;\n            case \"merge\":\n                return mergeSortCode;\n            default:\n                return bubbleSortCode;\n        }\n    };\n    const generateRandomArray = ()=>{\n        const newArray = Array.from({\n            length: 8\n        }, ()=>Math.floor(Math.random() * 100) + 1);\n        setArray(newArray);\n        reset();\n    };\n    const reset = ()=>{\n        setIsPlaying(false);\n        isPlayingRef.current = false;\n        setCurrentStep(0);\n        setComparingIndices([]);\n        setSortedIndices([]);\n    };\n    const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n    const bubbleSort = async ()=>{\n        const arr = [\n            ...array\n        ];\n        const n = arr.length;\n        for(let i = 0; i < n - 1 && isPlayingRef.current; i++){\n            for(let j = 0; j < n - i - 1 && isPlayingRef.current; j++){\n                setComparingIndices([\n                    j,\n                    j + 1\n                ]);\n                await sleep(800);\n                if (!isPlayingRef.current) return;\n                if (arr[j] > arr[j + 1]) {\n                    [arr[j], arr[j + 1]] = [\n                        arr[j + 1],\n                        arr[j]\n                    ];\n                    setArray([\n                        ...arr\n                    ]);\n                }\n            }\n            setSortedIndices((prev)=>[\n                    ...prev,\n                    n - 1 - i\n                ]);\n        }\n        if (isPlayingRef.current) {\n            setSortedIndices(Array.from({\n                length: n\n            }, (_, i)=>i));\n            setComparingIndices([]);\n            setIsPlaying(false);\n            isPlayingRef.current = false;\n        }\n    };\n    const quickSort = async function(arr) {\n        let low = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, high = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : arr.length - 1, indices = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Array.from({\n            length: arr.length\n        }, (_, i)=>i);\n        if (low < high && isPlayingRef.current) {\n            const pi = await partition(arr, low, high, indices);\n            if (isPlayingRef.current) {\n                await quickSort(arr, low, pi - 1, indices);\n                await quickSort(arr, pi + 1, high, indices);\n            }\n        }\n    };\n    const partition = async (arr, low, high, indices)=>{\n        const pivot = arr[high];\n        let i = low - 1;\n        setComparingIndices([\n            high\n        ]);\n        await sleep(600);\n        for(let j = low; j < high && isPlayingRef.current; j++){\n            setComparingIndices([\n                j,\n                high\n            ]);\n            await sleep(600);\n            if (!isPlayingRef.current) return i + 1;\n            if (arr[j] < pivot) {\n                i++;\n                [arr[i], arr[j]] = [\n                    arr[j],\n                    arr[i]\n                ];\n                setArray([\n                    ...arr\n                ]);\n                await sleep(400);\n            }\n        }\n        if (isPlayingRef.current) {\n            [arr[i + 1], arr[high]] = [\n                arr[high],\n                arr[i + 1]\n            ];\n            setArray([\n                ...arr\n            ]);\n            setSortedIndices((prev)=>[\n                    ...prev,\n                    i + 1\n                ]);\n            await sleep(600);\n        }\n        return i + 1;\n    };\n    const mergeSort = async function() {\n        let startArr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            ...array\n        ], start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : array.length - 1;\n        if (start >= end || !isPlayingRef.current) return;\n        const mid = Math.floor((start + end) / 2);\n        setComparingIndices([\n            start,\n            mid,\n            end\n        ]);\n        await sleep(800);\n        if (!isPlayingRef.current) return;\n        await mergeSort(startArr, start, mid);\n        await mergeSort(startArr, mid + 1, end);\n        if (isPlayingRef.current) {\n            await merge(startArr, start, mid, end);\n        }\n    };\n    const merge = async (arr, start, mid, end)=>{\n        const left = arr.slice(start, mid + 1);\n        const right = arr.slice(mid + 1, end + 1);\n        let i = 0, j = 0, k = start;\n        while(i < left.length && j < right.length && isPlayingRef.current){\n            setComparingIndices([\n                start + i,\n                mid + 1 + j\n            ]);\n            await sleep(600);\n            if (!isPlayingRef.current) return;\n            if (left[i] <= right[j]) {\n                arr[k] = left[i];\n                i++;\n            } else {\n                arr[k] = right[j];\n                j++;\n            }\n            k++;\n            setArray([\n                ...arr\n            ]);\n        }\n        while(i < left.length && isPlayingRef.current){\n            arr[k] = left[i];\n            i++;\n            k++;\n            setArray([\n                ...arr\n            ]);\n            await sleep(400);\n        }\n        while(j < right.length && isPlayingRef.current){\n            arr[k] = right[j];\n            j++;\n            k++;\n            setArray([\n                ...arr\n            ]);\n            await sleep(400);\n        }\n        if (isPlayingRef.current && start === 0 && end === array.length - 1) {\n            setSortedIndices(Array.from({\n                length: array.length\n            }, (_, i)=>i));\n        }\n    };\n    const play = async ()=>{\n        if (isPlaying) return;\n        setIsPlaying(true);\n        isPlayingRef.current = true;\n        setSortedIndices([]);\n        setComparingIndices([]);\n        if (selectedAlgorithm === \"bubble\") {\n            await bubbleSort();\n        } else if (selectedAlgorithm === \"quick\") {\n            const arr = [\n                ...array\n            ];\n            await quickSort(arr);\n            if (isPlayingRef.current) {\n                setSortedIndices(Array.from({\n                    length: array.length\n                }, (_, i)=>i));\n                setComparingIndices([]);\n            }\n        } else if (selectedAlgorithm === \"merge\") {\n            await mergeSort();\n            if (isPlayingRef.current) {\n                setComparingIndices([]);\n            }\n        }\n        setIsPlaying(false);\n        isPlayingRef.current = false;\n    };\n    const pause = ()=>{\n        setIsPlaying(false);\n        isPlayingRef.current = false;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        reset();\n    }, [\n        selectedAlgorithm\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        isPlayingRef.current = isPlaying;\n    }, [\n        isPlaying\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_AlgorithmSelector__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                algorithms: algorithms,\n                selectedAlgorithm: selectedAlgorithm,\n                setSelectedAlgorithm: setSelectedAlgorithm\n            }, void 0, false, {\n                fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                lineNumber: 288,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid lg:grid-cols-2 gap-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-6\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_VisualizationArea__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                array: array,\n                                comparingIndices: comparingIndices,\n                                sortedIndices: sortedIndices,\n                                type: \"sorting\"\n                            }, void 0, false, {\n                                fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                                lineNumber: 296,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ControlPanel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                isPlaying: isPlaying,\n                                onPlay: play,\n                                onPause: pause,\n                                onReset: reset,\n                                onGenerateArray: generateRandomArray\n                            }, void 0, false, {\n                                fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                                lineNumber: 303,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                        lineNumber: 295,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_CodeDisplay__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        code: getAlgorithmCode(),\n                        language: \"javascript\",\n                        title: ((_algorithms_find = algorithms.find((a)=>a.id === selectedAlgorithm)) === null || _algorithms_find === void 0 ? void 0 : _algorithms_find.name) || \"\"\n                    }, void 0, false, {\n                        fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                        lineNumber: 312,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n                lineNumber: 294,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"F:\\\\webdoan\\\\CTDT-GT\\\\components\\\\algorithms\\\\SortingAlgorithms.tsx\",\n        lineNumber: 287,\n        columnNumber: 5\n    }, this);\n}\n_s(SortingAlgorithms, \"CMyeyrqF7l4HqxHQCD3QE2Z+Y0Q=\");\n_c = SortingAlgorithms;\nvar _c;\n$RefreshReg$(_c, \"SortingAlgorithms\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/algorithms/SortingAlgorithms.tsx\n"));

/***/ })

});